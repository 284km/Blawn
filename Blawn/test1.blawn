global
(
    C_INT = 0
    C_FLOAT = 0.0
    true = 1 > 0
    false = 1 < 0
    pass = 0
)

Ctype ct
    @n = __PTR__ __PTR__ __C_INTEGER__
    @ctmem = __PTR__ __C_INTEGER__
Ctype nnn
    @nm = ct
insct = ct()
print(int_to_str(insct.ctmem))

[Cfunction dx_init]
arguments:
return: C_INT

[Cfunction dx_waitkey]
arguments:
return: C_INT

[Cfunction dx_end]
arguments:
return: C_INT
class type(value)
    @size = sizeof(value)
    @id = typeid(value)
class List(element)
    @size = 0
    @allocated_size = 1
    @element_typeid = 0
    @element_size = 0
    @array = {}
    @function resize()
        print("will realloc")
        print(int_to_str(self.size))
        self.allocated_size = self.allocated_size * 2
        self.array = __blawn_realloc__(self.array,self.element_size,self.allocated_size)
        return
    @function append(new_element)
        if self.size == 0 
        (
            self.element_typeid = typeid(new_element)
            self.element_size = sizeof(new_element)
        )
        if typeid(new_element) != self.element_typeid
        (
            print("Error: append invalid type element to list.")
        )
        if self.size + 1 >= self.allocated_size
        (   
            self.resize()
        )
        __blawn_memcpy__(self.array,self.size,self.element_size,new_element)
        self.size = self.size + 1
        return
    @function get(index)
        if self.size == 0
        (
            print("Error: list index out of range")
        )
        data = __blawn_index__(self.array,self.size,self.element_size,index)
        res = __blawn_cast__(typeid(self.element),data)
        return res
    @function set(value,index)
        __blawn_set_element__(self.array,self.size,self.element_size,value,index)
        return
class Person(name)
    @name = name
    @function hello(s)
        text = "Hello! I'm "
        text.append(self.name)
        print(text)
        print(s)
        return
    @function m()
        print("call m")
        return
    @function mm()
        print("call mm")
        print(self.i.s)
        return

p = Person("John")
p2 = Person("Tom!")
//list = List(p)
for i = 0 ,i < 100 ,i = i+1
(
    //list.append(p)
    new = Person("person")
)
//list.set(p2,20)
d = ""
//list.get(20).name
print(d)
print("succeed!!")
for pass,false,pass
(
    print("a")
)

function f(arg)
    print(arg.name)
    return
f(p)
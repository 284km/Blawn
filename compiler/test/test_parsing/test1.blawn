class Type(value)
    @size = sizeof(value)
    @id = typeid(value)


class List(element_type)
    @size = 0
    @allocated_size = 1
    @element_size = element_type.size
    @%element_typeid = element_type.id
    @array = {}
    @function resize()
        self.allocated_size = self.allocated_size * 2
        self.array = blawn_realloc(self.array,self.element_size,self.allocated_size)
        return
    @function append(new_element)
        if typeid(new_element) != self.element_typeid
        (
            old = "old: "
            old.append(int_to_str(self.element_typeid))
            print(old)
            new = "new:"
            new.append(int_to_str(typeid(new_element)))
            print(new)
            print("Error: append invalid type element to list.")
        )
        if self.size + 1 >= self.allocated_size
        (   
            self.resize()
        )
        blawn_memcpy(self.array,self.size,self.element_size,new_element)
        self.size = self.size + 1
        return
    @function get(index)
        if self.size == 0
        (
            print("err")
        )
        data = blawn_index(self.array,self.size,self.element_size,index)
        
        return data




class Person(name)
    @name = name
    @function hello(s)
        text = "Hello! I'm "
        text.append(self.name)
        print(text)
        print(s)
        return
    @function m()
        print("call m")
        return
    @function mm()
        print("call mm")
        print(self.i.s)
        return


class V()
    @n = 10
    @nn = 0.0
    @nnn = 0.0

p = Person("John")
list = List(Type(p))

for i = 0 ,i < 100 ,i = i+1
(
    list.append(p)
)
d = cast(typeid(p),list.get(0))
print(d.name)
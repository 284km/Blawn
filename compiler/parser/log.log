Terminals unused in grammar

   C_FUNCTION
   USE
   COLON
   SEMICOLON
   LEFT_BRACKET
   RIGHT_BRACKET
   IN
   WHILE


Grammar

    0 $accept: program "end of file"

    1 program: block

    2 block: lines

    3 lines: line
    4      | lines line

    5 line: line_content EOL
    6     | line_content "end of file"
    7     | definition

    8 line_content: expression

    9 definition: function_definition
   10           | class_definition
   11           | c_type_definition
   12           | globals_definition
   13           | c_function_declaration

   14 function_definition: function_start arguments EOL block return_value EOL
   15                    | function_start arguments EOL return_value EOL

   16 function_start: FUNCTION_DEFINITION

   17 class_definition: class_start arguments EOL members_definition methods
   18                 | class_start arguments EOL members_definition
   19                 | class_start arguments EOL methods

   20 class_start: CLASS_DEFINITION

   21 c_type_definition: c_type_start EOL C_members_definition

   22 c_type_start: C_TYPE_DEFINITION

   23 methods: method_definition EOL
   24        | methods method_definition EOL

   25 method_definition: METHOD_DEFINITION arguments EOL block return_value

   26 members_definition: MEMBER_IDENTIFIER EQUAL expression EOL
   27                   | members_definition MEMBER_IDENTIFIER EQUAL expression EOL

   28 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier EOL
   29                     | C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

   30 C_type_identifier: IDENTIFIER
   31                  | C_type_identifier IDENTIFIER

   32 C_arguments: C_type_identifier
   33            | C_arguments COMMA C_type_identifier

   34 C_returns: C_type_identifier

   35 return_value: RETURN expression
   36             | RETURN

   37 arguments: LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   38          | LEFT_PARENTHESIS RIGHT_PARENTHESIS

   39 definition_arguments: IDENTIFIER
   40                     | definition_arguments COMMA IDENTIFIER

   41 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

   42 global_start: GLOBAL

   43 globals_variables: assign_variable
   44                  | globals_variables EOL assign_variable

   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

   47 expressions: expression
   48            | expressions COMMA expression

   49 if_start: IF

   50 else_start: ELSE

   51 for_start: FOR expression COMMA expression COMMA expression

   52 expression: if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | assign_variable
   56           | expression ARROW expression
   57           | expression PLUS expression
   58           | expression MINUS expression
   59           | expression ASTERISK expression
   60           | expression SLASH expression
   61           | expression OP_AND expression
   62           | expression OP_OR expression
   63           | expression OP_MORE_EQUAL expression
   64           | expression OP_LESS_EQUAL expression
   65           | expression OP_MORE expression
   66           | expression OP_LESS expression
   67           | expression OP_NOT_EQUAL expression
   68           | expression OP_EQUAL expression
   69           | monomial
   70           | list
   71           | access

   72 list: LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | LEFT_CURLY_BRACE RIGHT_CURLY_BRACE

   74 access: expression DOT_IDENTIFIER

   75 assign_variable: IDENTIFIER EQUAL expression
   76                | access EQUAL expression

   77 monomial: call
   78         | STRING_LITERAL
   79         | FLOAT_LITERAL
   80         | INT_LITERAL
   81         | variable

   82 call: IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | access LEFT_PARENTHESIS RIGHT_PARENTHESIS

   86 variable: IDENTIFIER


Terminals, with rules where they appear

"end of file" (0) 0 6
error (256)
FUNCTION_DEFINITION (258) 16
METHOD_DEFINITION (259) 25
CLASS_DEFINITION (260) 20
C_TYPE_DEFINITION (261) 22
C_FUNCTION_DECLARATION (262) 45 46
RETURN (263) 35 36
C_FUNCTION (264)
MEMBER_IDENTIFIER (265) 26 27 28 29
IDENTIFIER (266) 30 31 39 40 75 82 83 86
EQUAL (267) 26 27 28 29 75 76
ARROW (268) 56
OP_AND (269) 61
OP_OR (270) 62
OP_EQUAL (271) 68
OP_NOT_EQUAL (272) 67
OP_MORE_EQUAL (273) 63
OP_LESS_EQUAL (274) 64
OP_MORE (275) 65
OP_LESS (276) 66
PLUS (277) 57
MINUS (278) 58
ASTERISK (279) 59
SLASH (280) 60
DOT_IDENTIFIER (281) 74
USE (282)
COLON (283)
SEMICOLON (284)
COMMA (285) 33 40 48 51
LEFT_PARENTHESIS (286) 37 38 41 52 53 54 82 83 84 85
RIGHT_PARENTHESIS (287) 37 38 41 52 53 54 82 83 84 85
LEFT_CURLY_BRACE (288) 72 73
RIGHT_CURLY_BRACE (289) 72 73
LEFT_BRACKET (290)
RIGHT_BRACKET (291)
IF (292) 49
ELSE (293) 50
FOR (294) 51
IN (295)
WHILE (296)
GLOBAL (297) 42
C_FUNCTION_ARGUMENT (298) 45 46
C_FUNCTION_RETURN (299) 45 46
EOL (300) 5 14 15 17 18 19 21 23 24 25 26 27 28 29 41 44 45 46 52 53
    54
INT_LITERAL (301) 80
FLOAT_LITERAL (302) 79
STRING_LITERAL (303) 78


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
block (51)
    on left: 2, on right: 1 14 25 52 53 54
lines (52)
    on left: 3 4, on right: 2 4
line (53)
    on left: 5 6 7, on right: 3 4
line_content (54)
    on left: 8, on right: 5 6
definition (55)
    on left: 9 10 11 12 13, on right: 7
function_definition (56)
    on left: 14 15, on right: 9
function_start (57)
    on left: 16, on right: 14 15
class_definition (58)
    on left: 17 18 19, on right: 10
class_start (59)
    on left: 20, on right: 17 18 19
c_type_definition (60)
    on left: 21, on right: 11
c_type_start (61)
    on left: 22, on right: 21
methods (62)
    on left: 23 24, on right: 17 19 24
method_definition (63)
    on left: 25, on right: 23 24
members_definition (64)
    on left: 26 27, on right: 17 18 27
C_members_definition (65)
    on left: 28 29, on right: 21 29
C_type_identifier (66)
    on left: 30 31, on right: 28 29 31 32 33 34
C_arguments (67)
    on left: 32 33, on right: 33 45
C_returns (68)
    on left: 34, on right: 45 46
return_value (69)
    on left: 35 36, on right: 14 15 25
arguments (70)
    on left: 37 38, on right: 14 15 17 18 19 25
definition_arguments (71)
    on left: 39 40, on right: 37 40
globals_definition (72)
    on left: 41, on right: 12
global_start (73)
    on left: 42, on right: 41
globals_variables (74)
    on left: 43 44, on right: 41 44
c_function_declaration (75)
    on left: 45 46, on right: 13
expressions (76)
    on left: 47 48, on right: 48 72 82 84
if_start (77)
    on left: 49, on right: 52
else_start (78)
    on left: 50, on right: 53
for_start (79)
    on left: 51, on right: 54
expression (80)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
    70 71, on right: 8 26 27 35 47 48 51 52 56 57 58 59 60 61 62 63
    64 65 66 67 68 74 75 76
list (81)
    on left: 72 73, on right: 70
access (82)
    on left: 74, on right: 71 76 84 85
assign_variable (83)
    on left: 75 76, on right: 43 44 55
monomial (84)
    on left: 77 78 79 80 81, on right: 69
call (85)
    on left: 82 83 84 85, on right: 77
variable (86)
    on left: 86, on right: 81


State 0

    0 $accept: . program "end of file"
    1 program: . block
    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    program                 go to state 14
    block                   go to state 15
    lines                   go to state 16
    line                    go to state 17
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 1

   16 function_start: FUNCTION_DEFINITION .

    $default  reduce using rule 16 (function_start)


State 2

   20 class_start: CLASS_DEFINITION .

    $default  reduce using rule 20 (class_start)


State 3

   22 c_type_start: C_TYPE_DEFINITION .

    $default  reduce using rule 22 (c_type_start)


State 4

   45 c_function_declaration: C_FUNCTION_DECLARATION . EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | C_FUNCTION_DECLARATION . EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

    EOL  shift, and go to state 39


State 5

   75 assign_variable: IDENTIFIER . EQUAL expression
   82 call: IDENTIFIER . LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | IDENTIFIER . LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: IDENTIFIER .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    EQUAL             shift, and go to state 40
    LEFT_PARENTHESIS  shift, and go to state 41

    $default  reduce using rule 86 (variable)


State 6

   47 expressions: . expression
   48            | . expressions COMMA expression
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   72     | LEFT_CURLY_BRACE . expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   73     | LEFT_CURLY_BRACE . RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    LEFT_CURLY_BRACE   shift, and go to state 6
    RIGHT_CURLY_BRACE  shift, and go to state 42
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    INT_LITERAL        shift, and go to state 11
    FLOAT_LITERAL      shift, and go to state 12
    STRING_LITERAL     shift, and go to state 13

    expressions      go to state 43
    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 44
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 7

   49 if_start: IF .

    $default  reduce using rule 49 (if_start)


State 8

   50 else_start: ELSE .

    $default  reduce using rule 50 (else_start)


State 9

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   51          | FOR . expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 45
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 10

   42 global_start: GLOBAL .

    $default  reduce using rule 42 (global_start)


State 11

   80 monomial: INT_LITERAL .

    $default  reduce using rule 80 (monomial)


State 12

   79 monomial: FLOAT_LITERAL .

    $default  reduce using rule 79 (monomial)


State 13

   78 monomial: STRING_LITERAL .

    $default  reduce using rule 78 (monomial)


State 14

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 46


State 15

    1 program: block .

    $default  reduce using rule 1 (program)


State 16

    2 block: lines .  ["end of file", RETURN, RIGHT_PARENTHESIS]
    4 lines: lines . line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    $default  reduce using rule 2 (block)

    line                    go to state 47
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 17

    3 lines: line .

    $default  reduce using rule 3 (lines)


State 18

    5 line: line_content . EOL
    6     | line_content . "end of file"

    "end of file"  shift, and go to state 48
    EOL            shift, and go to state 49


State 19

    7 line: definition .

    $default  reduce using rule 7 (line)


State 20

    9 definition: function_definition .

    $default  reduce using rule 9 (definition)


State 21

   14 function_definition: function_start . arguments EOL block return_value EOL
   15                    | function_start . arguments EOL return_value EOL
   37 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   38          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 50

    arguments  go to state 51


State 22

   10 definition: class_definition .

    $default  reduce using rule 10 (definition)


State 23

   17 class_definition: class_start . arguments EOL members_definition methods
   18                 | class_start . arguments EOL members_definition
   19                 | class_start . arguments EOL methods
   37 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   38          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 50

    arguments  go to state 52


State 24

   11 definition: c_type_definition .

    $default  reduce using rule 11 (definition)


State 25

   21 c_type_definition: c_type_start . EOL C_members_definition

    EOL  shift, and go to state 53


State 26

   12 definition: globals_definition .

    $default  reduce using rule 12 (definition)


State 27

   41 globals_definition: global_start . EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    EOL  shift, and go to state 54


State 28

   13 definition: c_function_declaration .

    $default  reduce using rule 13 (definition)


State 29

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   52           | if_start . expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 55
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 30

   53 expression: else_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 56


State 31

   54 expression: for_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 57


State 32

    8 line_content: expression .  ["end of file", EOL]
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 8 (line_content)


State 33

   70 expression: list .

    $default  reduce using rule 70 (expression)


State 34

   71 expression: access .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   76 assign_variable: access . EQUAL expression
   84 call: access . LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | access . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    EQUAL             shift, and go to state 72
    LEFT_PARENTHESIS  shift, and go to state 73

    $default  reduce using rule 71 (expression)


State 35

   55 expression: assign_variable .

    $default  reduce using rule 55 (expression)


State 36

   69 expression: monomial .

    $default  reduce using rule 69 (expression)


State 37

   77 monomial: call .

    $default  reduce using rule 77 (monomial)


State 38

   81 monomial: variable .

    $default  reduce using rule 81 (monomial)


State 39

   45 c_function_declaration: C_FUNCTION_DECLARATION EOL . C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | C_FUNCTION_DECLARATION EOL . C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_ARGUMENT  shift, and go to state 74


State 40

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   75                | IDENTIFIER EQUAL . expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 75
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 41

   47 expressions: . expression
   48            | . expressions COMMA expression
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   82     | IDENTIFIER LEFT_PARENTHESIS . expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   83     | IDENTIFIER LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 76
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    INT_LITERAL        shift, and go to state 11
    FLOAT_LITERAL      shift, and go to state 12
    STRING_LITERAL     shift, and go to state 13

    expressions      go to state 77
    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 44
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 42

   73 list: LEFT_CURLY_BRACE RIGHT_CURLY_BRACE .

    $default  reduce using rule 73 (list)


State 43

   48 expressions: expressions . COMMA expression
   72 list: LEFT_CURLY_BRACE expressions . RIGHT_CURLY_BRACE

    COMMA              shift, and go to state 78
    RIGHT_CURLY_BRACE  shift, and go to state 79


State 44

   47 expressions: expression .  [COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE]
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 47 (expressions)


State 45

   51 for_start: FOR expression . COMMA expression COMMA expression
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71
    COMMA           shift, and go to state 80


State 46

    0 $accept: program "end of file" .

    $default  accept


State 47

    4 lines: lines line .

    $default  reduce using rule 4 (lines)


State 48

    6 line: line_content "end of file" .

    $default  reduce using rule 6 (line)


State 49

    5 line: line_content EOL .

    $default  reduce using rule 5 (line)


State 50

   37 arguments: LEFT_PARENTHESIS . definition_arguments RIGHT_PARENTHESIS
   38          | LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   39 definition_arguments: . IDENTIFIER
   40                     | . definition_arguments COMMA IDENTIFIER

    IDENTIFIER         shift, and go to state 81
    RIGHT_PARENTHESIS  shift, and go to state 82

    definition_arguments  go to state 83


State 51

   14 function_definition: function_start arguments . EOL block return_value EOL
   15                    | function_start arguments . EOL return_value EOL

    EOL  shift, and go to state 84


State 52

   17 class_definition: class_start arguments . EOL members_definition methods
   18                 | class_start arguments . EOL members_definition
   19                 | class_start arguments . EOL methods

    EOL  shift, and go to state 85


State 53

   21 c_type_definition: c_type_start EOL . C_members_definition
   28 C_members_definition: . MEMBER_IDENTIFIER EQUAL C_type_identifier EOL
   29                     | . C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

    MEMBER_IDENTIFIER  shift, and go to state 86

    C_members_definition  go to state 87


State 54

   41 globals_definition: global_start EOL . LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    LEFT_PARENTHESIS  shift, and go to state 88


State 55

   52 expression: if_start expression . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   56           | expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71
    EOL             shift, and go to state 89


State 56

   53 expression: else_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 90


State 57

   54 expression: for_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 91


State 58

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   56           | expression ARROW . expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 92
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 59

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   61           | expression OP_AND . expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 93
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 60

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   62           | expression OP_OR . expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 94
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 61

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   68           | expression OP_EQUAL . expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 95
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 62

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   67           | expression OP_NOT_EQUAL . expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 96
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 63

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   63           | expression OP_MORE_EQUAL . expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 97
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 64

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   64           | expression OP_LESS_EQUAL . expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 98
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 65

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   65           | expression OP_MORE . expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 99
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 66

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   66           | expression OP_LESS . expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 100
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 67

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   57           | expression PLUS . expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 101
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 68

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   58           | expression MINUS . expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 102
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 69

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   59           | expression ASTERISK . expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 103
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 70

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   60           | expression SLASH . expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 104
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 71

   74 access: expression DOT_IDENTIFIER .

    $default  reduce using rule 74 (access)


State 72

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   76                | access EQUAL . expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 105
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 73

   47 expressions: . expression
   48            | . expressions COMMA expression
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   84     | access LEFT_PARENTHESIS . expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   85     | access LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 106
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    INT_LITERAL        shift, and go to state 11
    FLOAT_LITERAL      shift, and go to state 12
    STRING_LITERAL     shift, and go to state 13

    expressions      go to state 107
    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 44
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 74

   30 C_type_identifier: . IDENTIFIER
   31                  | . C_type_identifier IDENTIFIER
   32 C_arguments: . C_type_identifier
   33            | . C_arguments COMMA C_type_identifier
   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT . C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT . EOL C_FUNCTION_RETURN C_returns EOL

    IDENTIFIER  shift, and go to state 108
    EOL         shift, and go to state 109

    C_type_identifier  go to state 110
    C_arguments        go to state 111


State 75

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER
   75 assign_variable: IDENTIFIER EQUAL expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 75 (assign_variable)

    Conflict between rule 75 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 75 and token OP_AND resolved as shift (EQUAL < OP_AND).
    Conflict between rule 75 and token OP_OR resolved as shift (EQUAL < OP_OR).
    Conflict between rule 75 and token OP_EQUAL resolved as shift (EQUAL < OP_EQUAL).
    Conflict between rule 75 and token OP_NOT_EQUAL resolved as shift (EQUAL < OP_NOT_EQUAL).
    Conflict between rule 75 and token OP_MORE_EQUAL resolved as shift (EQUAL < OP_MORE_EQUAL).
    Conflict between rule 75 and token OP_LESS_EQUAL resolved as shift (EQUAL < OP_LESS_EQUAL).
    Conflict between rule 75 and token OP_MORE resolved as shift (EQUAL < OP_MORE).
    Conflict between rule 75 and token OP_LESS resolved as shift (EQUAL < OP_LESS).
    Conflict between rule 75 and token PLUS resolved as shift (EQUAL < PLUS).
    Conflict between rule 75 and token MINUS resolved as shift (EQUAL < MINUS).
    Conflict between rule 75 and token ASTERISK resolved as shift (EQUAL < ASTERISK).
    Conflict between rule 75 and token SLASH resolved as shift (EQUAL < SLASH).
    Conflict between rule 75 and token DOT_IDENTIFIER resolved as shift (EQUAL < DOT_IDENTIFIER).


State 76

   83 call: IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 83 (call)


State 77

   48 expressions: expressions . COMMA expression
   82 call: IDENTIFIER LEFT_PARENTHESIS expressions . RIGHT_PARENTHESIS

    COMMA              shift, and go to state 78
    RIGHT_PARENTHESIS  shift, and go to state 112


State 78

   48 expressions: expressions COMMA . expression
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 113
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 79

   72 list: LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE .

    $default  reduce using rule 72 (list)


State 80

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   51          | FOR expression COMMA . expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 114
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 81

   39 definition_arguments: IDENTIFIER .

    $default  reduce using rule 39 (definition_arguments)


State 82

   38 arguments: LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 38 (arguments)


State 83

   37 arguments: LEFT_PARENTHESIS definition_arguments . RIGHT_PARENTHESIS
   40 definition_arguments: definition_arguments . COMMA IDENTIFIER

    COMMA              shift, and go to state 115
    RIGHT_PARENTHESIS  shift, and go to state 116


State 84

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   14                    | function_start arguments EOL . block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   15                    | function_start arguments EOL . return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   35 return_value: . RETURN expression
   36             | . RETURN
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    RETURN                  shift, and go to state 117
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    block                   go to state 118
    lines                   go to state 16
    line                    go to state 17
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    return_value            go to state 119
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 85

   17 class_definition: class_start arguments EOL . members_definition methods
   18                 | class_start arguments EOL . members_definition
   19                 | class_start arguments EOL . methods
   23 methods: . method_definition EOL
   24        | . methods method_definition EOL
   25 method_definition: . METHOD_DEFINITION arguments EOL block return_value
   26 members_definition: . MEMBER_IDENTIFIER EQUAL expression EOL
   27                   | . members_definition MEMBER_IDENTIFIER EQUAL expression EOL

    METHOD_DEFINITION  shift, and go to state 120
    MEMBER_IDENTIFIER  shift, and go to state 121

    methods             go to state 122
    method_definition   go to state 123
    members_definition  go to state 124


State 86

   28 C_members_definition: MEMBER_IDENTIFIER . EQUAL C_type_identifier EOL

    EQUAL  shift, and go to state 125


State 87

   21 c_type_definition: c_type_start EOL C_members_definition .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, INT_LITERAL, FLOAT_LITERAL, STRING_LITERAL]
   29 C_members_definition: C_members_definition . MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

    MEMBER_IDENTIFIER  shift, and go to state 126

    $default  reduce using rule 21 (c_type_definition)


State 88

   41 globals_definition: global_start EOL LEFT_PARENTHESIS . EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    EOL  shift, and go to state 127


State 89

   52 expression: if_start expression EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 128


State 90

   53 expression: else_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 129


State 91

   54 expression: for_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 130


State 92

   56 expression: expression . ARROW expression
   56           | expression ARROW expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 56 (expression)

    Conflict between rule 56 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 56 and token OP_AND resolved as shift (ARROW < OP_AND).
    Conflict between rule 56 and token OP_OR resolved as shift (ARROW < OP_OR).
    Conflict between rule 56 and token OP_EQUAL resolved as shift (ARROW < OP_EQUAL).
    Conflict between rule 56 and token OP_NOT_EQUAL resolved as shift (ARROW < OP_NOT_EQUAL).
    Conflict between rule 56 and token OP_MORE_EQUAL resolved as shift (ARROW < OP_MORE_EQUAL).
    Conflict between rule 56 and token OP_LESS_EQUAL resolved as shift (ARROW < OP_LESS_EQUAL).
    Conflict between rule 56 and token OP_MORE resolved as shift (ARROW < OP_MORE).
    Conflict between rule 56 and token OP_LESS resolved as shift (ARROW < OP_LESS).
    Conflict between rule 56 and token PLUS resolved as shift (ARROW < PLUS).
    Conflict between rule 56 and token MINUS resolved as shift (ARROW < MINUS).
    Conflict between rule 56 and token ASTERISK resolved as shift (ARROW < ASTERISK).
    Conflict between rule 56 and token SLASH resolved as shift (ARROW < SLASH).
    Conflict between rule 56 and token DOT_IDENTIFIER resolved as shift (ARROW < DOT_IDENTIFIER).


State 93

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   61           | expression OP_AND expression .  ["end of file", ARROW, OP_AND, OP_OR, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 61 (expression)

    Conflict between rule 61 and token ARROW resolved as reduce (ARROW < OP_AND).
    Conflict between rule 61 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 61 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 61 and token OP_EQUAL resolved as shift (OP_AND < OP_EQUAL).
    Conflict between rule 61 and token OP_NOT_EQUAL resolved as shift (OP_AND < OP_NOT_EQUAL).
    Conflict between rule 61 and token OP_MORE_EQUAL resolved as shift (OP_AND < OP_MORE_EQUAL).
    Conflict between rule 61 and token OP_LESS_EQUAL resolved as shift (OP_AND < OP_LESS_EQUAL).
    Conflict between rule 61 and token OP_MORE resolved as shift (OP_AND < OP_MORE).
    Conflict between rule 61 and token OP_LESS resolved as shift (OP_AND < OP_LESS).
    Conflict between rule 61 and token PLUS resolved as shift (OP_AND < PLUS).
    Conflict between rule 61 and token MINUS resolved as shift (OP_AND < MINUS).
    Conflict between rule 61 and token ASTERISK resolved as shift (OP_AND < ASTERISK).
    Conflict between rule 61 and token SLASH resolved as shift (OP_AND < SLASH).
    Conflict between rule 61 and token DOT_IDENTIFIER resolved as shift (OP_AND < DOT_IDENTIFIER).


State 94

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   62           | expression OP_OR expression .  ["end of file", ARROW, OP_AND, OP_OR, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token ARROW resolved as reduce (ARROW < OP_OR).
    Conflict between rule 62 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 62 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 62 and token OP_EQUAL resolved as shift (OP_OR < OP_EQUAL).
    Conflict between rule 62 and token OP_NOT_EQUAL resolved as shift (OP_OR < OP_NOT_EQUAL).
    Conflict between rule 62 and token OP_MORE_EQUAL resolved as shift (OP_OR < OP_MORE_EQUAL).
    Conflict between rule 62 and token OP_LESS_EQUAL resolved as shift (OP_OR < OP_LESS_EQUAL).
    Conflict between rule 62 and token OP_MORE resolved as shift (OP_OR < OP_MORE).
    Conflict between rule 62 and token OP_LESS resolved as shift (OP_OR < OP_LESS).
    Conflict between rule 62 and token PLUS resolved as shift (OP_OR < PLUS).
    Conflict between rule 62 and token MINUS resolved as shift (OP_OR < MINUS).
    Conflict between rule 62 and token ASTERISK resolved as shift (OP_OR < ASTERISK).
    Conflict between rule 62 and token SLASH resolved as shift (OP_OR < SLASH).
    Conflict between rule 62 and token DOT_IDENTIFIER resolved as shift (OP_OR < DOT_IDENTIFIER).


State 95

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   68           | expression OP_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   74 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token ARROW resolved as reduce (ARROW < OP_EQUAL).
    Conflict between rule 68 and token OP_AND resolved as reduce (OP_AND < OP_EQUAL).
    Conflict between rule 68 and token OP_OR resolved as reduce (OP_OR < OP_EQUAL).
    Conflict between rule 68 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 68 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 68 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 68 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 68 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 68 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 68 and token PLUS resolved as shift (OP_EQUAL < PLUS).
    Conflict between rule 68 and token MINUS resolved as shift (OP_EQUAL < MINUS).
    Conflict between rule 68 and token ASTERISK resolved as shift (OP_EQUAL < ASTERISK).
    Conflict between rule 68 and token SLASH resolved as shift (OP_EQUAL < SLASH).
    Conflict between rule 68 and token DOT_IDENTIFIER resolved as shift (OP_EQUAL < DOT_IDENTIFIER).


State 96

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   67           | expression OP_NOT_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token ARROW resolved as reduce (ARROW < OP_NOT_EQUAL).
    Conflict between rule 67 and token OP_AND resolved as reduce (OP_AND < OP_NOT_EQUAL).
    Conflict between rule 67 and token OP_OR resolved as reduce (OP_OR < OP_NOT_EQUAL).
    Conflict between rule 67 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 67 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 67 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 67 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 67 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 67 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 67 and token PLUS resolved as shift (OP_NOT_EQUAL < PLUS).
    Conflict between rule 67 and token MINUS resolved as shift (OP_NOT_EQUAL < MINUS).
    Conflict between rule 67 and token ASTERISK resolved as shift (OP_NOT_EQUAL < ASTERISK).
    Conflict between rule 67 and token SLASH resolved as shift (OP_NOT_EQUAL < SLASH).
    Conflict between rule 67 and token DOT_IDENTIFIER resolved as shift (OP_NOT_EQUAL < DOT_IDENTIFIER).


State 97

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   63           | expression OP_MORE_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token ARROW resolved as reduce (ARROW < OP_MORE_EQUAL).
    Conflict between rule 63 and token OP_AND resolved as reduce (OP_AND < OP_MORE_EQUAL).
    Conflict between rule 63 and token OP_OR resolved as reduce (OP_OR < OP_MORE_EQUAL).
    Conflict between rule 63 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 63 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 63 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 63 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 63 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 63 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 63 and token PLUS resolved as shift (OP_MORE_EQUAL < PLUS).
    Conflict between rule 63 and token MINUS resolved as shift (OP_MORE_EQUAL < MINUS).
    Conflict between rule 63 and token ASTERISK resolved as shift (OP_MORE_EQUAL < ASTERISK).
    Conflict between rule 63 and token SLASH resolved as shift (OP_MORE_EQUAL < SLASH).
    Conflict between rule 63 and token DOT_IDENTIFIER resolved as shift (OP_MORE_EQUAL < DOT_IDENTIFIER).


State 98

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   64           | expression OP_LESS_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token ARROW resolved as reduce (ARROW < OP_LESS_EQUAL).
    Conflict between rule 64 and token OP_AND resolved as reduce (OP_AND < OP_LESS_EQUAL).
    Conflict between rule 64 and token OP_OR resolved as reduce (OP_OR < OP_LESS_EQUAL).
    Conflict between rule 64 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 64 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 64 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 64 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 64 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 64 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 64 and token PLUS resolved as shift (OP_LESS_EQUAL < PLUS).
    Conflict between rule 64 and token MINUS resolved as shift (OP_LESS_EQUAL < MINUS).
    Conflict between rule 64 and token ASTERISK resolved as shift (OP_LESS_EQUAL < ASTERISK).
    Conflict between rule 64 and token SLASH resolved as shift (OP_LESS_EQUAL < SLASH).
    Conflict between rule 64 and token DOT_IDENTIFIER resolved as shift (OP_LESS_EQUAL < DOT_IDENTIFIER).


State 99

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   65           | expression OP_MORE expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token ARROW resolved as reduce (ARROW < OP_MORE).
    Conflict between rule 65 and token OP_AND resolved as reduce (OP_AND < OP_MORE).
    Conflict between rule 65 and token OP_OR resolved as reduce (OP_OR < OP_MORE).
    Conflict between rule 65 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 65 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 65 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 65 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 65 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 65 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 65 and token PLUS resolved as shift (OP_MORE < PLUS).
    Conflict between rule 65 and token MINUS resolved as shift (OP_MORE < MINUS).
    Conflict between rule 65 and token ASTERISK resolved as shift (OP_MORE < ASTERISK).
    Conflict between rule 65 and token SLASH resolved as shift (OP_MORE < SLASH).
    Conflict between rule 65 and token DOT_IDENTIFIER resolved as shift (OP_MORE < DOT_IDENTIFIER).


State 100

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   66           | expression OP_LESS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token ARROW resolved as reduce (ARROW < OP_LESS).
    Conflict between rule 66 and token OP_AND resolved as reduce (OP_AND < OP_LESS).
    Conflict between rule 66 and token OP_OR resolved as reduce (OP_OR < OP_LESS).
    Conflict between rule 66 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 66 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 66 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 66 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 66 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 66 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 66 and token PLUS resolved as shift (OP_LESS < PLUS).
    Conflict between rule 66 and token MINUS resolved as shift (OP_LESS < MINUS).
    Conflict between rule 66 and token ASTERISK resolved as shift (OP_LESS < ASTERISK).
    Conflict between rule 66 and token SLASH resolved as shift (OP_LESS < SLASH).
    Conflict between rule 66 and token DOT_IDENTIFIER resolved as shift (OP_LESS < DOT_IDENTIFIER).


State 101

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   57           | expression PLUS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 57 (expression)

    Conflict between rule 57 and token ARROW resolved as reduce (ARROW < PLUS).
    Conflict between rule 57 and token OP_AND resolved as reduce (OP_AND < PLUS).
    Conflict between rule 57 and token OP_OR resolved as reduce (OP_OR < PLUS).
    Conflict between rule 57 and token OP_EQUAL resolved as reduce (OP_EQUAL < PLUS).
    Conflict between rule 57 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < PLUS).
    Conflict between rule 57 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < PLUS).
    Conflict between rule 57 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < PLUS).
    Conflict between rule 57 and token OP_MORE resolved as reduce (OP_MORE < PLUS).
    Conflict between rule 57 and token OP_LESS resolved as reduce (OP_LESS < PLUS).
    Conflict between rule 57 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 57 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 57 and token ASTERISK resolved as shift (PLUS < ASTERISK).
    Conflict between rule 57 and token SLASH resolved as shift (PLUS < SLASH).
    Conflict between rule 57 and token DOT_IDENTIFIER resolved as shift (PLUS < DOT_IDENTIFIER).


State 102

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   58           | expression MINUS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 58 (expression)

    Conflict between rule 58 and token ARROW resolved as reduce (ARROW < MINUS).
    Conflict between rule 58 and token OP_AND resolved as reduce (OP_AND < MINUS).
    Conflict between rule 58 and token OP_OR resolved as reduce (OP_OR < MINUS).
    Conflict between rule 58 and token OP_EQUAL resolved as reduce (OP_EQUAL < MINUS).
    Conflict between rule 58 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < MINUS).
    Conflict between rule 58 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < MINUS).
    Conflict between rule 58 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < MINUS).
    Conflict between rule 58 and token OP_MORE resolved as reduce (OP_MORE < MINUS).
    Conflict between rule 58 and token OP_LESS resolved as reduce (OP_LESS < MINUS).
    Conflict between rule 58 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 58 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 58 and token ASTERISK resolved as shift (MINUS < ASTERISK).
    Conflict between rule 58 and token SLASH resolved as shift (MINUS < SLASH).
    Conflict between rule 58 and token DOT_IDENTIFIER resolved as shift (MINUS < DOT_IDENTIFIER).


State 103

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   59           | expression ASTERISK expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 59 (expression)

    Conflict between rule 59 and token ARROW resolved as reduce (ARROW < ASTERISK).
    Conflict between rule 59 and token OP_AND resolved as reduce (OP_AND < ASTERISK).
    Conflict between rule 59 and token OP_OR resolved as reduce (OP_OR < ASTERISK).
    Conflict between rule 59 and token OP_EQUAL resolved as reduce (OP_EQUAL < ASTERISK).
    Conflict between rule 59 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < ASTERISK).
    Conflict between rule 59 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < ASTERISK).
    Conflict between rule 59 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < ASTERISK).
    Conflict between rule 59 and token OP_MORE resolved as reduce (OP_MORE < ASTERISK).
    Conflict between rule 59 and token OP_LESS resolved as reduce (OP_LESS < ASTERISK).
    Conflict between rule 59 and token PLUS resolved as reduce (PLUS < ASTERISK).
    Conflict between rule 59 and token MINUS resolved as reduce (MINUS < ASTERISK).
    Conflict between rule 59 and token ASTERISK resolved as reduce (%left ASTERISK).
    Conflict between rule 59 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 59 and token DOT_IDENTIFIER resolved as shift (ASTERISK < DOT_IDENTIFIER).


State 104

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   60           | expression SLASH expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 60 (expression)

    Conflict between rule 60 and token ARROW resolved as reduce (ARROW < SLASH).
    Conflict between rule 60 and token OP_AND resolved as reduce (OP_AND < SLASH).
    Conflict between rule 60 and token OP_OR resolved as reduce (OP_OR < SLASH).
    Conflict between rule 60 and token OP_EQUAL resolved as reduce (OP_EQUAL < SLASH).
    Conflict between rule 60 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < SLASH).
    Conflict between rule 60 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < SLASH).
    Conflict between rule 60 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < SLASH).
    Conflict between rule 60 and token OP_MORE resolved as reduce (OP_MORE < SLASH).
    Conflict between rule 60 and token OP_LESS resolved as reduce (OP_LESS < SLASH).
    Conflict between rule 60 and token PLUS resolved as reduce (PLUS < SLASH).
    Conflict between rule 60 and token MINUS resolved as reduce (MINUS < SLASH).
    Conflict between rule 60 and token ASTERISK resolved as reduce (%left ASTERISK).
    Conflict between rule 60 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 60 and token DOT_IDENTIFIER resolved as shift (SLASH < DOT_IDENTIFIER).


State 105

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER
   76 assign_variable: access EQUAL expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 76 (assign_variable)

    Conflict between rule 76 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 76 and token OP_AND resolved as shift (EQUAL < OP_AND).
    Conflict between rule 76 and token OP_OR resolved as shift (EQUAL < OP_OR).
    Conflict between rule 76 and token OP_EQUAL resolved as shift (EQUAL < OP_EQUAL).
    Conflict between rule 76 and token OP_NOT_EQUAL resolved as shift (EQUAL < OP_NOT_EQUAL).
    Conflict between rule 76 and token OP_MORE_EQUAL resolved as shift (EQUAL < OP_MORE_EQUAL).
    Conflict between rule 76 and token OP_LESS_EQUAL resolved as shift (EQUAL < OP_LESS_EQUAL).
    Conflict between rule 76 and token OP_MORE resolved as shift (EQUAL < OP_MORE).
    Conflict between rule 76 and token OP_LESS resolved as shift (EQUAL < OP_LESS).
    Conflict between rule 76 and token PLUS resolved as shift (EQUAL < PLUS).
    Conflict between rule 76 and token MINUS resolved as shift (EQUAL < MINUS).
    Conflict between rule 76 and token ASTERISK resolved as shift (EQUAL < ASTERISK).
    Conflict between rule 76 and token SLASH resolved as shift (EQUAL < SLASH).
    Conflict between rule 76 and token DOT_IDENTIFIER resolved as shift (EQUAL < DOT_IDENTIFIER).


State 106

   85 call: access LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 85 (call)


State 107

   48 expressions: expressions . COMMA expression
   84 call: access LEFT_PARENTHESIS expressions . RIGHT_PARENTHESIS

    COMMA              shift, and go to state 78
    RIGHT_PARENTHESIS  shift, and go to state 131


State 108

   30 C_type_identifier: IDENTIFIER .

    $default  reduce using rule 30 (C_type_identifier)


State 109

   46 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL . C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_RETURN  shift, and go to state 132


State 110

   31 C_type_identifier: C_type_identifier . IDENTIFIER
   32 C_arguments: C_type_identifier .  [COMMA, EOL]

    IDENTIFIER  shift, and go to state 133

    $default  reduce using rule 32 (C_arguments)


State 111

   33 C_arguments: C_arguments . COMMA C_type_identifier
   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments . EOL C_FUNCTION_RETURN C_returns EOL

    COMMA  shift, and go to state 134
    EOL    shift, and go to state 135


State 112

   82 call: IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS .

    $default  reduce using rule 82 (call)


State 113

   48 expressions: expressions COMMA expression .  [COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE]
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 48 (expressions)


State 114

   51 for_start: FOR expression COMMA expression . COMMA expression
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71
    COMMA           shift, and go to state 136


State 115

   40 definition_arguments: definition_arguments COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 137


State 116

   37 arguments: LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS .

    $default  reduce using rule 37 (arguments)


State 117

   35 return_value: RETURN . expression
   36             | RETURN .  [EOL]
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    $default  reduce using rule 36 (return_value)

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 138
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 118

   14 function_definition: function_start arguments EOL block . return_value EOL
   35 return_value: . RETURN expression
   36             | . RETURN

    RETURN  shift, and go to state 117

    return_value  go to state 139


State 119

   15 function_definition: function_start arguments EOL return_value . EOL

    EOL  shift, and go to state 140


State 120

   25 method_definition: METHOD_DEFINITION . arguments EOL block return_value
   37 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   38          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 50

    arguments  go to state 141


State 121

   26 members_definition: MEMBER_IDENTIFIER . EQUAL expression EOL

    EQUAL  shift, and go to state 142


State 122

   19 class_definition: class_start arguments EOL methods .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, INT_LITERAL, FLOAT_LITERAL, STRING_LITERAL]
   24 methods: methods . method_definition EOL
   25 method_definition: . METHOD_DEFINITION arguments EOL block return_value

    METHOD_DEFINITION  shift, and go to state 120

    $default  reduce using rule 19 (class_definition)

    method_definition  go to state 143


State 123

   23 methods: method_definition . EOL

    EOL  shift, and go to state 144


State 124

   17 class_definition: class_start arguments EOL members_definition . methods
   18                 | class_start arguments EOL members_definition .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, INT_LITERAL, FLOAT_LITERAL, STRING_LITERAL]
   23 methods: . method_definition EOL
   24        | . methods method_definition EOL
   25 method_definition: . METHOD_DEFINITION arguments EOL block return_value
   27 members_definition: members_definition . MEMBER_IDENTIFIER EQUAL expression EOL

    METHOD_DEFINITION  shift, and go to state 120
    MEMBER_IDENTIFIER  shift, and go to state 145

    $default  reduce using rule 18 (class_definition)

    methods            go to state 146
    method_definition  go to state 123


State 125

   28 C_members_definition: MEMBER_IDENTIFIER EQUAL . C_type_identifier EOL
   30 C_type_identifier: . IDENTIFIER
   31                  | . C_type_identifier IDENTIFIER

    IDENTIFIER  shift, and go to state 108

    C_type_identifier  go to state 147


State 126

   29 C_members_definition: C_members_definition MEMBER_IDENTIFIER . EQUAL C_type_identifier EOL

    EQUAL  shift, and go to state 148


State 127

   41 globals_definition: global_start EOL LEFT_PARENTHESIS EOL . globals_variables EOL RIGHT_PARENTHESIS EOL
   43 globals_variables: . assign_variable
   44                  | . globals_variables EOL assign_variable
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    globals_variables  go to state 149
    if_start           go to state 29
    else_start         go to state 30
    for_start          go to state 31
    expression         go to state 150
    list               go to state 33
    access             go to state 34
    assign_variable    go to state 151
    monomial           go to state 36
    call               go to state 37
    variable           go to state 38


State 128

   52 expression: if_start expression EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 152


State 129

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | else_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    block                   go to state 153
    lines                   go to state 16
    line                    go to state 17
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 130

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | for_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    block                   go to state 154
    lines                   go to state 16
    line                    go to state 17
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 131

   84 call: access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS .

    $default  reduce using rule 84 (call)


State 132

   30 C_type_identifier: . IDENTIFIER
   31                  | . C_type_identifier IDENTIFIER
   34 C_returns: . C_type_identifier
   46 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN . C_returns EOL

    IDENTIFIER  shift, and go to state 108

    C_type_identifier  go to state 155
    C_returns          go to state 156


State 133

   31 C_type_identifier: C_type_identifier IDENTIFIER .

    $default  reduce using rule 31 (C_type_identifier)


State 134

   30 C_type_identifier: . IDENTIFIER
   31                  | . C_type_identifier IDENTIFIER
   33 C_arguments: C_arguments COMMA . C_type_identifier

    IDENTIFIER  shift, and go to state 108

    C_type_identifier  go to state 157


State 135

   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL . C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_RETURN  shift, and go to state 158


State 136

   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   51          | FOR expression COMMA expression COMMA . expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 159
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 137

   40 definition_arguments: definition_arguments COMMA IDENTIFIER .

    $default  reduce using rule 40 (definition_arguments)


State 138

   35 return_value: RETURN expression .  [EOL]
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 35 (return_value)


State 139

   14 function_definition: function_start arguments EOL block return_value . EOL

    EOL  shift, and go to state 160


State 140

   15 function_definition: function_start arguments EOL return_value EOL .

    $default  reduce using rule 15 (function_definition)


State 141

   25 method_definition: METHOD_DEFINITION arguments . EOL block return_value

    EOL  shift, and go to state 161


State 142

   26 members_definition: MEMBER_IDENTIFIER EQUAL . expression EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 162
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 143

   24 methods: methods method_definition . EOL

    EOL  shift, and go to state 163


State 144

   23 methods: method_definition EOL .

    $default  reduce using rule 23 (methods)


State 145

   27 members_definition: members_definition MEMBER_IDENTIFIER . EQUAL expression EOL

    EQUAL  shift, and go to state 164


State 146

   17 class_definition: class_start arguments EOL members_definition methods .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, INT_LITERAL, FLOAT_LITERAL, STRING_LITERAL]
   24 methods: methods . method_definition EOL
   25 method_definition: . METHOD_DEFINITION arguments EOL block return_value

    METHOD_DEFINITION  shift, and go to state 120

    $default  reduce using rule 17 (class_definition)

    method_definition  go to state 143


State 147

   28 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier . EOL
   31 C_type_identifier: C_type_identifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 133
    EOL         shift, and go to state 165


State 148

   29 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL . C_type_identifier EOL
   30 C_type_identifier: . IDENTIFIER
   31                  | . C_type_identifier IDENTIFIER

    IDENTIFIER  shift, and go to state 108

    C_type_identifier  go to state 166


State 149

   41 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables . EOL RIGHT_PARENTHESIS EOL
   44 globals_variables: globals_variables . EOL assign_variable

    EOL  shift, and go to state 167


State 150

   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71


State 151

   43 globals_variables: assign_variable .  [EOL]
   55 expression: assign_variable .  [ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER]

    EOL       reduce using rule 43 (globals_variables)
    $default  reduce using rule 55 (expression)


State 152

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   52           | if_start expression EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    block                   go to state 168
    lines                   go to state 16
    line                    go to state 17
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 153

   53 expression: else_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 169


State 154

   54 expression: for_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 170


State 155

   31 C_type_identifier: C_type_identifier . IDENTIFIER
   34 C_returns: C_type_identifier .  [EOL]

    IDENTIFIER  shift, and go to state 133

    $default  reduce using rule 34 (C_returns)


State 156

   46 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns . EOL

    EOL  shift, and go to state 171


State 157

   31 C_type_identifier: C_type_identifier . IDENTIFIER
   33 C_arguments: C_arguments COMMA C_type_identifier .  [COMMA, EOL]

    IDENTIFIER  shift, and go to state 133

    $default  reduce using rule 33 (C_arguments)


State 158

   30 C_type_identifier: . IDENTIFIER
   31                  | . C_type_identifier IDENTIFIER
   34 C_returns: . C_type_identifier
   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN . C_returns EOL

    IDENTIFIER  shift, and go to state 108

    C_type_identifier  go to state 155
    C_returns          go to state 172


State 159

   51 for_start: FOR expression COMMA expression COMMA expression .  [EOL]
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71

    $default  reduce using rule 51 (for_start)


State 160

   14 function_definition: function_start arguments EOL block return_value EOL .

    $default  reduce using rule 14 (function_definition)


State 161

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8 line_content: . expression
    9 definition: . function_definition
   10           | . class_definition
   11           | . c_type_definition
   12           | . globals_definition
   13           | . c_function_declaration
   14 function_definition: . function_start arguments EOL block return_value EOL
   15                    | . function_start arguments EOL return_value EOL
   16 function_start: . FUNCTION_DEFINITION
   17 class_definition: . class_start arguments EOL members_definition methods
   18                 | . class_start arguments EOL members_definition
   19                 | . class_start arguments EOL methods
   20 class_start: . CLASS_DEFINITION
   21 c_type_definition: . c_type_start EOL C_members_definition
   22 c_type_start: . C_TYPE_DEFINITION
   25 method_definition: METHOD_DEFINITION arguments EOL . block return_value
   41 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   42 global_start: . GLOBAL
   45 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   46                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    INT_LITERAL             shift, and go to state 11
    FLOAT_LITERAL           shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13

    block                   go to state 173
    lines                   go to state 16
    line                    go to state 17
    line_content            go to state 18
    definition              go to state 19
    function_definition     go to state 20
    function_start          go to state 21
    class_definition        go to state 22
    class_start             go to state 23
    c_type_definition       go to state 24
    c_type_start            go to state 25
    globals_definition      go to state 26
    global_start            go to state 27
    c_function_declaration  go to state 28
    if_start                go to state 29
    else_start              go to state 30
    for_start               go to state 31
    expression              go to state 32
    list                    go to state 33
    access                  go to state 34
    assign_variable         go to state 35
    monomial                go to state 36
    call                    go to state 37
    variable                go to state 38


State 162

   26 members_definition: MEMBER_IDENTIFIER EQUAL expression . EOL
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71
    EOL             shift, and go to state 174


State 163

   24 methods: methods method_definition EOL .

    $default  reduce using rule 24 (methods)


State 164

   27 members_definition: members_definition MEMBER_IDENTIFIER EQUAL . expression EOL
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    INT_LITERAL       shift, and go to state 11
    FLOAT_LITERAL     shift, and go to state 12
    STRING_LITERAL    shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 175
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 35
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 165

   28 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier EOL .

    $default  reduce using rule 28 (C_members_definition)


State 166

   29 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier . EOL
   31 C_type_identifier: C_type_identifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 133
    EOL         shift, and go to state 176


State 167

   41 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL . RIGHT_PARENTHESIS EOL
   44 globals_variables: globals_variables EOL . assign_variable
   49 if_start: . IF
   50 else_start: . ELSE
   51 for_start: . FOR expression COMMA expression COMMA expression
   52 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   53           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   54           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   55           | . assign_variable
   56           | . expression ARROW expression
   57           | . expression PLUS expression
   58           | . expression MINUS expression
   59           | . expression ASTERISK expression
   60           | . expression SLASH expression
   61           | . expression OP_AND expression
   62           | . expression OP_OR expression
   63           | . expression OP_MORE_EQUAL expression
   64           | . expression OP_LESS_EQUAL expression
   65           | . expression OP_MORE expression
   66           | . expression OP_LESS expression
   67           | . expression OP_NOT_EQUAL expression
   68           | . expression OP_EQUAL expression
   69           | . monomial
   70           | . list
   71           | . access
   72 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   73     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   74 access: . expression DOT_IDENTIFIER
   75 assign_variable: . IDENTIFIER EQUAL expression
   76                | . access EQUAL expression
   77 monomial: . call
   78         | . STRING_LITERAL
   79         | . FLOAT_LITERAL
   80         | . INT_LITERAL
   81         | . variable
   82 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   83     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   84     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   85     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   86 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 177
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    INT_LITERAL        shift, and go to state 11
    FLOAT_LITERAL      shift, and go to state 12
    STRING_LITERAL     shift, and go to state 13

    if_start         go to state 29
    else_start       go to state 30
    for_start        go to state 31
    expression       go to state 150
    list             go to state 33
    access           go to state 34
    assign_variable  go to state 178
    monomial         go to state 36
    call             go to state 37
    variable         go to state 38


State 168

   52 expression: if_start expression EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 179


State 169

   53 expression: else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 53 (expression)


State 170

   54 expression: for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 54 (expression)


State 171

   46 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL .

    $default  reduce using rule 46 (c_function_declaration)


State 172

   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns . EOL

    EOL  shift, and go to state 180


State 173

   25 method_definition: METHOD_DEFINITION arguments EOL block . return_value
   35 return_value: . RETURN expression
   36             | . RETURN

    RETURN  shift, and go to state 117

    return_value  go to state 181


State 174

   26 members_definition: MEMBER_IDENTIFIER EQUAL expression EOL .

    $default  reduce using rule 26 (members_definition)


State 175

   27 members_definition: members_definition MEMBER_IDENTIFIER EQUAL expression . EOL
   56 expression: expression . ARROW expression
   57           | expression . PLUS expression
   58           | expression . MINUS expression
   59           | expression . ASTERISK expression
   60           | expression . SLASH expression
   61           | expression . OP_AND expression
   62           | expression . OP_OR expression
   63           | expression . OP_MORE_EQUAL expression
   64           | expression . OP_LESS_EQUAL expression
   65           | expression . OP_MORE expression
   66           | expression . OP_LESS expression
   67           | expression . OP_NOT_EQUAL expression
   68           | expression . OP_EQUAL expression
   74 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 58
    OP_AND          shift, and go to state 59
    OP_OR           shift, and go to state 60
    OP_EQUAL        shift, and go to state 61
    OP_NOT_EQUAL    shift, and go to state 62
    OP_MORE_EQUAL   shift, and go to state 63
    OP_LESS_EQUAL   shift, and go to state 64
    OP_MORE         shift, and go to state 65
    OP_LESS         shift, and go to state 66
    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    ASTERISK        shift, and go to state 69
    SLASH           shift, and go to state 70
    DOT_IDENTIFIER  shift, and go to state 71
    EOL             shift, and go to state 182


State 176

   29 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL .

    $default  reduce using rule 29 (C_members_definition)


State 177

   41 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS . EOL

    EOL  shift, and go to state 183


State 178

   44 globals_variables: globals_variables EOL assign_variable .  [EOL]
   55 expression: assign_variable .  [ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER]

    EOL       reduce using rule 44 (globals_variables)
    $default  reduce using rule 55 (expression)


State 179

   52 expression: if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 52 (expression)


State 180

   45 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL .

    $default  reduce using rule 45 (c_function_declaration)


State 181

   25 method_definition: METHOD_DEFINITION arguments EOL block return_value .

    $default  reduce using rule 25 (method_definition)


State 182

   27 members_definition: members_definition MEMBER_IDENTIFIER EQUAL expression EOL .

    $default  reduce using rule 27 (members_definition)


State 183

   41 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL .

    $default  reduce using rule 41 (globals_definition)
